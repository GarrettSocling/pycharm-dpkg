#!/bin/bash

set -e
#set -x

force=false
umask=022

uname_s=$(uname -s)

usage() {
  echo "usage: $0 OPTIONS" >&2
  echo "Use $0 -? for usage help" >&2
  exit 1
}

detect_platform() {
  if [[ -r /etc/debian_version ]]
  then
    echo "debian"
    return
  fi

echo "Could not detect platform, use -p to specify." >&2
}

build_common() {
  rm -rf root
  if [ ! -z "$src_dir" ]
  then
    echo "Copying PyCharm from $src_dir"
    mkdir -p root/usr/share/jetbrains
    cp -r "$src_dir" root/usr/share/jetbrains/pycharm
  else
    echo "Unpacking tarball"
    mkdir -p root/usr/share/jetbrains/pycharm
    $tar --strip-components 1 -C root/usr/share/jetbrains/pycharm -zxf download/$filename
  fi
  mkdir -p root/usr/bin

  cp pycharm.in root/usr/bin/pycharm
  chmod +rx root/usr/bin/pycharm

  mkdir -p root/usr/share/applications
  cp pycharm.desktop root/usr/share/applications/pycharm.desktop

  mkdir -p root/etc/pycharm
  cp pycharm.vmoptions.README root/etc/pycharm/
  echo "
Original pycharm.vmoptions:
" >> root/etc/pycharm/pycharm.vmoptions.README
  cat root/usr/share/jetbrains/pycharm/bin/pycharm.vmoptions >> root/etc/pycharm/pycharm.vmoptions.README

  fn=/tmp/pycharm.vmoptions.$$
  cp root/usr/share/jetbrains/pycharm/bin/pycharm.vmoptions $fn
  cat $fn | grep -v yjpagent > root/usr/share/jetbrains/pycharm/bin/pycharm.vmoptions
  rm $fn
}

calculate_package_filename() {
  case "$platform" in
    debian)
      # TODO: Add arch to the filename (i386, amd64)
      repo=repository/debian
      mkdir -p $repo
      package_filename=$repo/pycharm-$FLAVOR_LOWER-$version.deb
      ;;
  esac
}

build_debian() {
  build_common

  mkdir -p root/etc/sysctl.d
  cp debian/sysctl-99-pycharm.conf root/etc/sysctl.d/99-pycharm.conf
  chmod +rx root/usr/bin/pycharm

  mkdir -p root/DEBIAN

  sed \
    -e "s,OTHER_FLAVOR_LOWER,$OTHER_FLAVOR_LOWER," \
    -e "s,OTHER_FLAVOR,$OTHER_FLAVOR," \
    -e "s,FLAVOR_LOWER,$FLAVOR_LOWER," \
    -e "s,FLAVOR,$flavor," \
    -e "s,VERSION,$version," \
    debian/control.in > root/DEBIAN/control

  cp debian/postinst root/DEBIAN/postinst
  chmod +rx root/DEBIAN/postinst

  echo > debian/fakeroot.save
  FAKEROOT="fakeroot -i debian/fakeroot.save -s debian/fakeroot.save"
  $FAKEROOT -- chown -R root:root root/
  $FAKEROOT -- dpkg-deb -b root $package_filename
  rm debian/fakeroot.save

  if [ "$update_repository" = 1 ]
  then
    (cd $repo && dpkg-scanpackages -m . /dev/null | tee Packages | gzip > Packages.gz )
  fi
}

tar=`which gtar || true`
if [ ! -x "$tar" ]
then
  tar=`which tar`
  if [ ! -x "$tar" ]
  then
    echo "Could not find usable tar" >&2
    exit 1
  fi
fi

while getopts "f:Fs:v:u?" flag
do
  case "$flag" in
    s)
      src_dir=$OPTARG
      ;;
    f) 
      flavor=$OPTARG
      if [ "$flavor" != "professional" -a "$flavor" != "community" ]
      then
        usage
      fi
      ;;
    v)
      version=$OPTARG
      ;;
    u)
      update_repository=1
      ;;
    F)
      force="true"
      ;;
    ?)
      less README.md
      exit 0
      ;;
  esac
done

if [ -z "$platform" ]
then
  platform=$(detect_platform)
fi

if [ -z "$flavor" ]
then
  if [[ -r $HOME/.pycharm-dpkg ]]
  then
    flavor=$(sed -n "s,^flavor=\(.*\),\1,p" "$HOME/.pycharm-dpkg")
    if [ -z "$flavor" ]
    then
      echo "Defaulting to the 'community' flavor, use -f to override."
      flavor=community
      echo "Saving the flavor so you don't have to specify it again."
      echo flavor=$flavor >> "$HOME/.pycharm-dpkg"
    fi
  else
    echo "Defaulting to the 'community' flavor, use -f to override."
    flavor=community
    echo "Saving the flavor so you don't have to specify it again."
    echo flavor=$flavor >> "$HOME/.pycharm-dpkg"
  fi

  if [ -z "$flavor" ]
  then
    usage
  fi
else
  echo "Saving the flavor so you don't have to specify it again."
  if [[ -r $HOME/.pycharm-dpkg ]]
  then
    sed -i "s/flavor=.*/flavor=$flavor/g" "$HOME/.pycharm-dpkg"
  else
    echo flavor=$flavor > "$HOME/.pycharm-dpkg"
  fi
fi

if [ $flavor = "community" ]
then
  OTHER_FLAVOR_LOWER=professional
  OTHER_FLAVOR=professional
  FLAVOR_LOWER=community
else
  OTHER_FLAVOR_LOWER=community
  OTHER_FLAVOR=community
  FLAVOR_LOWER=professional
fi

#~ if [ -z "$channel" ]
#~ then
  #~ if [[ -r $HOME/.intellij-idea-dpkg ]]
  #~ then
    #~ channel=$(sed -n "s,^channel=\(.*\),\1,p" "$HOME/.intellij-idea-dpkg")
    #~ if [ -z "$channel" ]
    #~ then
      #~ echo "Defaulting to the 'eap' channel, use -c to override."
      #~ channel=eap
      #~ echo "Saving the channel so you don't have to specify it again."
      #~ echo channel=$channel >> "$HOME/.intellij-idea-dpkg"
    #~ fi
  #~ else
    #~ echo "Defaulting to the 'eap' channel, use -c to override."
    #~ channel=eap
    #~ echo "Saving the channel so you don't have to specify it again."
    #~ echo channel=$channel >> "$HOME/.intellij-idea-dpkg"
  #~ fi

  #~ if [ -z "$channel" ]
  #~ then
    #~ usage
  #~ fi
#~ else
  #~ if [[ -r $HOME/.intellij-idea-dpkg ]]
  #~ echo "Saving the channel so you don't have to specify it again."
  #~ then
    #~ sed -i "s/channel=.*/channel=$channel/g" "$HOME/.intellij-idea-dpkg"
  #~ else
    #~ echo channel=$channel > "$HOME/.intellij-idea-dpkg"
  #~ fi
#~ fi

if [ -z "$src_dir" ]
then
  if [ -z "$version" ]
  then
    versionURL="https://www.jetbrains.com$(wget -q "https://www.jetbrains.com/pycharm/download/" -O - | grep -o -P "<script type=\"text/javascript\" src=\"/js2/version.js\?ver=[0-9]+\"></script>" | grep -o -E "/js2/version.js\?ver=[0-9]+")"
    version=$(wget -q "$versionURL" -O - | grep -E "var versionPyCharmLong = \"[0-9]+\.[0-9]+\.[0-9]+\"" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+")
    echo "The latest version is $version"
  fi
  url=http://download.jetbrains.com/python/pycharm-$flavor-$version.tar.gz
  filename=pycharm-$flavor-$version.tar.gz
else
  if [ -z "$version" ]
  then
    echo "When building from a directory, a version has to be specified with -v." >&2
    exit 1
  fi

  if [ ! -d "$src_dir" ]
  then
    echo "Not a directory: $src_dir" >&2
    exit 1
  fi
fi

calculate_package_filename

if [ -r "$package_filename" ]
then
  if [ $force = "false" ]
  then
    echo "The requested version ($version) already exist in the repository, add -F to force a re-build of the package" >&2
    exit 1
  else
    echo "WARNING: re-building package for version $version" >&2
  fi
fi

if [ -z "$src_dir" ]
then
  mkdir -p download

  # It would be possible to use the MD5 sum as a check here, then there would be no need to every force a download
  #if [ -r "download/$filename" ]
  #then
  #  echo "$filename is already downloaded"
  #else
  #  echo "Downloading $url..."
  #  wget -O "download/$filename" $url
  #fi

  echo "Downloading version $version..."
  if [ `wget -q -P download -N $url; echo $?` != "0" ]
  then
    echo "Could not download $url" >&2
    exit 1
  fi

  if [ ! -r download/$filename ]
  then
    echo "wget didn't place the downloaded file where expected: download/$filename" >&2
    exit 1
  fi
fi

case "$platform" in
  debian)
    build_debian;;
esac
